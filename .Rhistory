table_type="TableOne"
throw("Table type 'table_type' is not a valid table type or is not yet supported: ", table_type)
stop("Table type 'table_type' is not a valid table type or is not yet supported: ", table_type)
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported"))
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported"),"")
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported"),table_type)
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "),table_type)
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
if(table_type="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
}
else{
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
}
else{
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
table()
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
}
else{
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
source("formats/table-one")
#' variable_name and factors and the rows are all the categorical variables whose one or more factors have small cells. variable_name
#' is a string and factors is a vector eg.
#'
#' variable_name factors
#' status        c('1', '2')
#'
#'@examples
#'
#'
#'@export
source("formats/table-one.R")
source("R/formats/table-one.R")
source("R/formats/table-one.R")
source("R/formats/table-one.R")
source("formats/table-one.R")
small_size_cells <- function(
table_one,
small_size = 6,
print = TRUE,
table_type="TableOne"
) {
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
}
else{
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
}
table_one_small_cells <- function(
table_one,
small_size = 6,
){
2+2
}
table_one_small_cells <- function(
table_one,
small_size = 6
) {
2+2
}
source("R/formats/table-one.R")
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
}
else{
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
}
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
}
else{
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
} else {
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
source("formats/table-one.R")
small_size_cells <- function(
table_one,
small_size = 6,
print = TRUE,
table_type="TableOne"
) {
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(table_one,small_size)
} else {
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
TableOne$MetaData[["small_cells"]] <- small_size_table
if(print){
print(TableOne$MetaData$small_cells)
}
}
TableOne$MetaData[["small_cells"]] <- small_size_table
passed_table$MetaData[["small_cells"]] <- small_size_table
small_size_cells <- function(
passed_table,
small_size = 6,
print = TRUE,
table_type="TableOne"
) {
if(table_type=="TableOne"){
small_size_table<- table_one_small_cells(passed_table,small_size)
} else {
stop(cat("Table type ", table_type, " is not a valid table type or is not yet supported "), "Unsupported Type")
}
passed_table$MetaData[["small_cells"]] <- small_size_table
if(print){
print(TableOne$MetaData$small_cells)
}
return(passed_table)
}
print(getwd())
install.packages("lintr")
lintr::lint("R\\small-cell-check.R")
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
lintr::lint("R\\small-cell-check.R")
lintr::lint("R\\table-one.R")
lintr::lint("R\\table-one.R")
lintr::lint("R\\table-one.R")
lintr::lint("R\\table-one.R")
install.packages("Rtools")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_pkg()
library(SmallCells)
install.packages("Rtools")
install.packages("tableone")
install.packages("survival")
library(survival)
data(pbc)
library("tableone")
# The list of variables which are categorical
catVars <- c("status", "trt", "ascites", "hepato",
"spiders", "edema", "stage")
# subset (aka filter). hmm, I wonder if this will create small cell sizes
pbc_subset <- subset(pbc, sex == "f" & age > 50 & edema == 0.5)
# create table 1 object
TableOne <- CreateTableOne(data = pbc_subset, factorVars = catVars)
print(TableOne)
library("SmallCells")
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
library("SmallCells")
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
library("SmallCells")
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
TableOne <- check_for_small_size_cells(TableOne)
library(SmallCells)
TableOne <- check_for_small_size_cells(TableOne)
